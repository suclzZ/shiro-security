<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <bean id="formAuthc" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter"/>

    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="authenticationStrategy">
            <!-- 多个Reaml认证中有一个认证成功即成功策略 -->
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
            <!-- 第一个Reaml认证策略 -->
            <!-- <bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"></bean> -->
            <!-- 必须所有Reaml都成功认证策略  -->
            <!-- <bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"></bean> -->
        </property>
<!--        <property name="realms">
            <list>
                <ref bean="otherRealm"/>
                <ref bean="defaultRealm"/>
            </list>
        </property>-->
    </bean>

	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的UserRealm.java -->
	<bean id="defaultRealm" class="com.sucl.shirosecurity.security.DefaultRealm"/>
    <bean id="otherRealm" class="com.sucl.shirosecurity.security.OtherRealm"/>

	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.html"页面 -->
		<property name="loginUrl" value="/login.jsp"/>
		<!-- 登录成功后要跳转的连接 -->
		<property name="successUrl" value="/index.jsp"/>
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
		<!-- <property name="unauthorizedUrl" value="/no_permissions.jsp" />  -->
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<property name="filterChainDefinitions">
			<value>
				<!-- anon表示此地址不需要任何权限即可访问 -->
				/css/** = anon
				/js/** = anon
				/images/** = anon
				/login.jsp = formAuthc
<<<<<<< HEAD
				/authc.jsp = roles[admin]
=======
                /logout = logout
                /authc.jsp = roles[admin]
>>>>>>> origin
				/** = authc
			</value>
		</property>
	</bean>

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Shiro 多Realm认证策略 -->
		<property name="authenticator" ref="authenticator"></property>

		<property name="sessionManager" ref="sessionManager"></property>
		<!--<property name="realm" ref="defaultRealm"/>-->
		<!-- 多Realm Bean 引用 -->
		<property name="realms">
			<list>
				<ref bean="defaultRealm"></ref>
				<ref bean="otherRealm"></ref>
			</list>
		</property>
		<property name="rememberMeManager" ref="rememberManager"></property>
	</bean>

	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!--session超时时间-->
		<property name="globalSessionTimeout" value="3600000"></property>
		<!--session缓存-->
		<property name="cacheManager" ref="cacheManager"></property>
		<!--删除失效session-->
		<property name="deleteInvalidSessions" value="true"></property>
		<!--session校验器-->
		<property name="sessionValidationSchedulerEnabled" value="true"></property>
		<!--session本地存储-->
		<property name="sessionDAO" ref="sessionDao"></property>
		<!--是否将sessionId存储到cookie-->
		<property name="sessionIdCookieEnabled" value="true"></property>
		<!--默认cookie存储的值-->
		<!--<property name="sessionIdCookie" value="sessionIdCookie"></property>-->
	</bean>

	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:encache.xml"></property>
	</bean>

	<bean id="sessionDao" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="cacheManager" ref="cacheManager"></property>
	</bean>

	<!--CookieRememberMeManager-->
	<bean id="rememberManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie" ref="simpleCookie"></property>
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('sucl')}"></property>
	</bean>

	<bean id="simpleCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<property name="httpOnly" value="true"></property>
		<property name="maxAge" value="180000"></property>
		<property name="value" value="rememberMe"></property>
	</bean>

	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!-- 开启shiro注解-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		  depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

</beans>